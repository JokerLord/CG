#version 420 core
layout (location = 0) in vec3 in_pos;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec2 in_tex_coords;
layout (location = 3) in vec3 in_tan;
layout (location = 4) in vec3 in_bitan;


out vec3 frag_pos;
out vec2 tex_coords;
out vec4 frag_pos_light_space;
out vec3 tan_dir_light_pos;
out vec3 tan_point_light_pos;
out vec3 tan_spot_light_pos;
out vec3 tan_spot_light_dir;
out vec3 tan_view_pos;
out vec3 tan_frag_pos;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 light_space_mat;

uniform vec3 dir_light_pos;
uniform vec3 point_light_pos;
uniform vec3 spot_light_pos;
uniform vec3 spot_light_dir;
uniform vec3 view_pos;

void main()
{
    frag_pos = vec3(model * vec4(in_pos, 1.0));   
    tex_coords = in_tex_coords;
    frag_pos_light_space = light_space_mat * vec4(vec3(model * vec4(in_pos, 1.0)), 1.0);
    
    mat3 normal_mat = transpose(inverse(mat3(model)));
    vec3 T = normalize(normal_mat * in_tan);
    vec3 N = normalize(normal_mat * in_normal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    
    mat3 TBN = transpose(mat3(T, B, N));
    tan_dir_light_pos = TBN * dir_light_pos;
    tan_point_light_pos = TBN * point_light_pos;
    tan_spot_light_pos = TBN * spot_light_pos;
    tan_spot_light_dir = TBN * spot_light_dir;
    tan_view_pos  = TBN * view_pos;
    tan_frag_pos  = TBN * frag_pos;
        
    gl_Position = projection * view * model * vec4(in_pos, 1.0);
}