#version 420 core
struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct DirLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cut_off;
    float outer_cut_off;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

out vec4 frag_color;

in vec3 frag_pos;
in vec3 normal;
in vec2 tex_coords;
in vec4 frag_pos_light_space;

uniform vec3 view_pos;

uniform Material material;
uniform DirLight dir_light;
uniform PointLight point_light;
uniform SpotLight spot_light;

uniform sampler2D shadow_map;

vec3 calc_dir_light(DirLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);
vec3 calc_point_light(PointLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);
vec3 calc_spot_light(SpotLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);
float calc_shadow(vec4 frag_pos_light_space, float bias);

void main()
{
    vec3 norm = normalize(normal);
    vec3 view_dir = normalize(view_pos - frag_pos);

    vec3 result = calc_dir_light(dir_light, norm, frag_pos, view_dir);
    result += calc_point_light(point_light, norm, frag_pos, view_dir);
    result += calc_spot_light(spot_light, norm, frag_pos, view_dir);
    frag_color = vec4(result, 1.0);
}

vec3 calc_dir_light(DirLight light, vec3 normal, vec3 frag_pos, vec3 view_dir)
{
    vec3 ambient = light.ambient * texture(material.diffuse, tex_coords).rgb;

    vec3 light_dir = normalize(light.position - frag_pos);
    float diff = max(dot(normal, light_dir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, tex_coords).rgb;

    vec3 halfway_dir = normalize(light_dir + view_dir);
    float spec = pow(max(dot(normal, halfway_dir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, tex_coords).rgb;
    
    float bias = max(0.05 * (1.0 - dot(normal, light_dir)), 0.005);
    float shadow = calc_shadow(frag_pos_light_space, bias);
    return (ambient + (1.0 - shadow) * (diffuse + specular));
}

vec3 calc_point_light(PointLight light, vec3 normal, vec3 frag_pos, vec3 view_dir)
{
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light.constant + light.linear * distance +
                        light.quadratic * distance * distance);

    vec3 ambient = light.ambient * texture(material.diffuse, tex_coords).rgb;

    vec3 light_dir = normalize(light.position - frag_pos);
    float diff = max(dot(normal, light_dir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, tex_coords).rgb;

    vec3 halfway_dir = normalize(light_dir + view_dir);
    float spec = pow(max(dot(normal, halfway_dir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, tex_coords).rgb;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return (ambient + diffuse + specular);
}

vec3 calc_spot_light(SpotLight light, vec3 normal, vec3 frag_pos, vec3 view_dir)
{
    vec3 light_dir = normalize(light.position - frag_pos);
    
    float theta = dot(light_dir, normalize(-light.direction));
    float epsilon = light.cut_off - light.outer_cut_off;
    float intensity = clamp((theta - light.outer_cut_off) / epsilon, 0.0, 1.0);
    
    if(theta > light.outer_cut_off)
    {    
        vec3 ambient = light.ambient * texture(material.diffuse, tex_coords).rgb;
       
        float diff = max(dot(normal, light_dir), 0.0);
        vec3 diffuse = light.diffuse * diff * texture(material.diffuse, tex_coords).rgb;  
        
        vec3 halfway_dir = normalize(light_dir + view_dir);
    	float spec = pow(max(dot(normal, halfway_dir), 0.0), material.shininess);
        vec3 specular = light.specular * spec * texture(material.specular, tex_coords).rgb;  
        
        float distance    = length(light.position - frag_pos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

        diffuse *= attenuation;
        specular *= attenuation;

        diffuse *= intensity;
        specular *= intensity;  
            
        return (ambient + diffuse + specular);
    }
    else 
    {
        return (light.ambient * texture(material.diffuse, tex_coords).rgb);
    }
}

float calc_shadow(vec4 frag_pos_light_space, float bias)
{
    vec3 coords = frag_pos_light_space.xyz / frag_pos_light_space.w;
    coords = coords * 0.5 + 0.5;
    float closest_depth = texture(shadow_map, coords.xy).r; 
    float cur_depth = coords.z;

    float shadow = 0.0;
    vec2 texel_size = 1.0 / textureSize(shadow_map, 0);
    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            float pcf = texture(shadow_map, coords.xy + vec2(x, y) * texel_size).r;
            shadow += cur_depth - bias > pcf ? 1.0 : 0.0;
        }
    }
    shadow = shadow / 9.0;
    
    if (coords.z > 1.0) {
        shadow = 0.0;
    }
    return shadow;
}